[CRAB]

jobtype = cmssw
scheduler = glite
### NOTE: just setting the name of the server (pi, lnl etc etc ) 
###       crab will submit the jobs to the server...   
#server_name = cnaf

[CMSSW]

### The data you want to access (to be found on DBS) 
#datasetpath=none
datasetpath = /ZeeJets_Pt_1400_1800/CMSSW_1_6_7-CSA07-1192835597/RECO


### The ParameterSet you want to use
pset = ZJetAnalysis.cfg

### Splitting parameters
total_number_of_events=-1 

#events_per_job = 10000
number_of_jobs = 1

### The output files (comma separated list)
output_file = CSA07-ZeeJets_Pt_1400_1800.root


[USER]

### OUTPUT files Management
##  output back into UI 
return_data = 0

### OUTPUT files INTO A SE
copy_data = 1
storage_element = cmssrm.fnal.gov
srm_version = 1
storage_path = /srm/managerv1?SFN=/resilient/kalanand/trash
#storage_element = srm.cern.ch
#storage_path = /castor/cern.ch/user/u/kalanand


## files to be put in InputSandBox, full path or in the current directory
## (wildcard * are allowed): comma separated list
#additional_input_files = some_reference_data.root


#additional file in PATH
#FileInPath fip1 = "electronIdLikelihoodTkIsolated.db"


#if server mode = 1 
eMail = kalanand@fnal.gov 

[EDG]

## RB/WMS management:
rb = CERN


## CMS myproxy server, to proxy delegation
proxy_server = myproxy.cern.ch



## to add other parameters to jdl file: comma separated list, each item _must_
## be complete, including the closing ";"
additional_jdl_parameters = AllowZippedISB = false;

## cpu time and wall_clock_time(=real time) in minutes. Written into the jdl file
max_cpu_time = 500
#max_wall_clock_time = 60



##  Black and White Lists management:
## By Storage
#se_black_list = 
#se_white_list = 

## By ComputingElement 
#ce_black_list = 
#ce_white_list = 

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

